; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{B8C5F168-D3BD-4B33-BBB5-001A88F96918}
AppName=App
AppVersion=1.0
;AppVerName=App 1.0
AppPublisher=My Company, Inc.
AppPublisherURL=https://www.example.com/
AppSupportURL=https://www.example.com/
AppUpdatesURL=https://www.example.com/
DefaultDirName={autopf}\App
DefaultGroupName=App
AllowNoIcons=yes
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
OutputDir=Z:\home\dari\PycharmProjects\sem6\ISOB\lab4\output\
OutputBaseFilename=setup
Password=darya
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "Z:\home\dari\PycharmProjects\sem6\ISOB\lab4\output\application"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\App"; Filename: "{app}\application"
Name: "{group}\{cm:ProgramOnTheWeb,App}"; Filename: "https://www.example.com/"
Name: "{group}\{cm:UninstallProgram,App}"; Filename: "{uninstallexe}"
Name: "{autodesktop}\App"; Filename: "{app}\application"; Tasks: desktopicon

[Run]
Filename: "{app}\application"; Description: "{cm:LaunchProgram,App}"; Flags: nowait postinstall skipifsilent

[Code]
procedure CurStepChanged(CurStep: TSetupStep);
var
  FilePath: String;
  ExpectedHash: String;
  FileHash: String;
begin
  if (CurStep = ssPostInstall) then
  begin
    FilePath := ExpandConstant('{app}\application');
    ExpectedHash := '825851e6d921b146ff2961de513a281f655a5e43';

    FileHash := GetSHA1OfFile(FilePath);

    Log('FileHash: ' + FileHash);
    Log('ExpectedHash: ' + ExpectedHash);


    if (FileHash <> ExpectedHash) then
    begin
      MsgBox('Invalid file!', mbError, MB_OK);
      Abort;
    end;
  end;
end;